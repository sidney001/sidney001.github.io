<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[LeetCode/LintCode刷题之线性表]]></title>
      <url>/2017/03/17/LeetCodeLintCode%E5%88%B7%E9%A2%98%E4%B9%8B%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>#线性表</p>
<h2 id="Longest-Consecutive-Sequence"><a href="#Longest-Consecutive-Sequence" class="headerlink" title="Longest Consecutive Sequence"></a>Longest Consecutive Sequence</h2><ul>
<li>leetcode: <a href="https://leetcode.com/problems/longest-consecutive-sequence/" target="_blank" rel="external">Longest Consecutive Sequence | LeetCode OJ</a></li>
<li>lintcode: <a href="http://www.lintcode.com/en/problem/longest-consecutive-sequence/" target="_blank" rel="external">(124) Longest Consecutive Sequence</a></li>
</ul>
<h3 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h3><p>Given an unsorted array of integers, find the length of the longest<br>consecutive elements sequence.</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>Given <code>[100, 4, 200, 1, 3, 2]</code>,<br>The longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Return its<br>length: <code>4</code>.</p>
<h4 id="Clarification"><a href="#Clarification" class="headerlink" title="Clarification"></a>Clarification</h4><p>Your algorithm should run in O(<em>n</em>) complexity.</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先看题要求，时间复杂度为 $O(n)$, 如果排序，基于比较的实现为 $O(n \log n)$, 基数排序需要数据有特征。故排序无法达到复杂度要求。接下来可以联想空间换时间的做法，其中以哈希表为代表。这个题要求返回最长连续序列，不要求有序，非常符合哈希表的用法。<strong>由于给定一个数其连续的数要么比它小1，要么大1，那么我们只需往左往右搜索知道在数组中找不到数为止。</strong>结合哈希表查找为 $O(1)$ 的特性即可满足要求。用一个哈希表 <figure class="highlight plain"><figcaption><span>bool> used``` 记录每个元素是否使用，对每个元素，以该元素为中心，往左右扩张，直到不连续为止，记录下贵长的长度。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">详细说明：你看到[100, 4, 200, 1, 3, 2]这个数组，首先你会看99或者101在不在这个数组里，发现数组没这两个数，那么100组成的连续序列长度仅为1。接着会看5或者3在不在数组里，会发现3存在，5不存在；紧接着会看2在不在....直到发现0不在。从而得到4组成的最长序列为4。</div><div class="line">总结一下会发现，我们在判断某个数的连续序列时，会分别往减小和增大的方向找下一个连续数在不在数组中。然后把两个方向的长度加起来即为包含该数的一个连续序列。需要注意的是，当前数的长度计数只需要出现在一个方向的查找中计算即可，否则就重复了。要找一个数是不是在数组中，不可能用遍历的方法实现，这样时间复杂度就超过$O(n)$了。而要降低时间复杂度，一个经典的方案就是空间换时间。用增加空间复杂度的方法来换取时间复杂度的降低。所以我们可以先对数组进行一次预处理，生成一份包含数组元素的哈希表。这样在求解某个数字在不在数组时就可以得到O(1)的时间复杂度。</div><div class="line"></div><div class="line"></div><div class="line">### C++</div><div class="line">```C++</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int longestConsecutive(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        unordered_map&lt;int, bool&gt; used;</div><div class="line">        for (auto i : nums) used[i] = false; //遍历容器bector里的每一个元素,设为false</div><div class="line">        //for (auto i=1;i&lt;5;i++) cout&lt;&lt;used[i];</div><div class="line">        int longest = 0;</div><div class="line">        for (auto i : nums) &#123;</div><div class="line">            if (used[i]) continue; //防止array中有重复integar，continue跳出本次循环</div><div class="line">            int length = 1;</div><div class="line">            used[i] = true;</div><div class="line">            for (int j = i + 1; used.find(j) != used.end(); ++j) &#123;</div><div class="line">            //用find函数来定位数据出现位置，它返回的一个迭代器</div><div class="line">            //如果map中没有要查找的数据，它返回的迭代器等于end函数返回的迭代器</div><div class="line">                used[j] = true;</div><div class="line">                ++length;</div><div class="line">                &#125;</div><div class="line">            for (int j = i - 1; used.find(j) != used.end(); --j) &#123;</div><div class="line">                used[j] = true;</div><div class="line">                ++length;</div><div class="line">            &#125;</div><div class="line">            longest = max(longest, length);</div><div class="line">        &#125;</div><div class="line">        return longest;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度和空间复杂度均为 $O(n)$.</p>
<p>参考：map用法：<a href="http://blog.sina.com.cn/s/blog_59b6af690100xy0z.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_59b6af690100xy0z.html</a></p>
<h2 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h2><p>Tags: Array, Hash Table, Easy</p>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><ul>
<li>leetcode: <a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">Two Sum</a></li>
<li>lintcode: <a href="http://www.lintcode.com/en/problem/two-sum/" target="_blank" rel="external">Two Sum</a></li>
</ul>
<h3 id="Problem-Statement-1"><a href="#Problem-Statement-1" class="headerlink" title="Problem Statement"></a>Problem Statement</h3><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that<br>they add up to a specific target.</p>
<p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you<br>may not use the <em>same</em> element twice.</p>
<p><strong>Example:</strong>  </p>
<pre><code>Given nums = [2, 7, 11, 15], target = 9,

Because nums[**0**] + nums[**1**] = 2 + 7 = 9,
return [**0**, **1**].
</code></pre><h3 id="题解-哈希表"><a href="#题解-哈希表" class="headerlink" title="题解 - 哈希表"></a>题解 - 哈希表</h3><p>找两数之和是否为<code>target</code>, 如果是找数组中一个值为<code>target</code>该多好啊！遍历一次就知道了, 难道要将数组中所有元素的两两组合都求出来与<code>target</code>比较吗？时间复杂度显然为 $O(n^2)$, 显然不符题目要求。找一个数时直接遍历即可，那么可不可以将两个数之和转换为找一个数呢？我们先来看看两数之和为<code>target</code>所对应的判断条件—— $x_i + x_j = target$, 可进一步转化为 $x_i = target - x_j$, 其中 $i$ 和 $j$ 为数组中的下标。一段神奇的数学推理就<strong>将找两数之和转化为了找一个数是否在数组中了</strong>！<br>基本思路有了，现在就来看看怎么实现，显然我们需要额外的空间(也就是哈希表)来保存已经处理过的 $x_j$(<strong>注意这里并不能先初始化哈希表，否则无法排除两个相同的元素相加为 target 的情况</strong>), 如果不满足等式条件，那么我们就往后遍历，并把之前的元素加入到哈希表中，如果<code>target</code>减去当前索引后的值在哈希表中找到了，那么就将哈希表中相应的索引返回，大功告成！</p>
<p><strong>万能的哈希！！！！</strong></p>
<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> length = nums.size();</div><div class="line">        <span class="keyword">if</span> (!length) &#123;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    <span class="comment">// first value, second index</span></div><div class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash(length);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != length; ++i) &#123;</div><div class="line">        <span class="keyword">if</span> (hash.find(target - nums[i]) != hash.end()) &#123;</div><div class="line">            result.push_back(hash[target - nums[i]]);<span class="comment">//index比i要小</span></div><div class="line">            result.push_back(i);<span class="comment">//题目要求index小的在前面</span></div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            hash[nums[i]] = i;<span class="comment">//放入哈希表中 i=0先放入哈希表</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>哈希表⽤了和数组等⻓的空间，空间复杂度为$O(n)$, 遍历⼀次数组，时间复杂度为$O(n)$.</p>
<p>参考：<a href="http://www.jiuzhang.com/solutions/2-sum/" target="_blank" rel="external">http://www.jiuzhang.com/solutions/2-sum/</a></p>
<h2 id="3-Sum"><a href="#3-Sum" class="headerlink" title="3 Sum"></a>3 Sum</h2><h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h2><ul>
<li>leetcode: <a href="https://leetcode.com/problems/3sum/" target="_blank" rel="external">3Sum | LeetCode OJ</a></li>
<li>lintcode: <a href="http://www.lintcode.com/en/problem/3sum/" target="_blank" rel="external">(57) 3 Sum</a></li>
</ul>
<h3 id="Problem-Statement-2"><a href="#Problem-Statement-2" class="headerlink" title="Problem Statement"></a>Problem Statement</h3><p>Given an array <em>S</em> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <em>S</em><br>such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which<br>gives the sum of zero.</p>
<h4 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h4><p>The solution set must not contain duplicate triplets.</p>
<pre><code>For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
</code></pre><h3 id="题解1-排序-哈希表-2-Sum"><a href="#题解1-排序-哈希表-2-Sum" class="headerlink" title="题解1 - 排序 + 哈希表 + 2 Sum"></a>题解1 - 排序 + 哈希表 + 2 Sum</h3><p>相比之前的 2 Sum, 3 Sum 又多加了一个数，按照之前 2 Sum 的分解为『1 Sum + 1 Sum』的思路，我们同样可以将 3 Sum 分解为『1 Sum + 2 Sum』的问题，具体就是首先对原数组排序，排序后选出第一个元素，随后在剩下的元素中使用 2 Sum 的解法。</p>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; result;</div><div class="line">        <span class="keyword">if</span> (nums.size() &lt; <span class="number">3</span>) <span class="keyword">return</span> result;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> length = nums.size();</div><div class="line">        <span class="comment">//for(i = 0; i &lt; nums.size() - 2; ++i)&#123; //最后2个没有可能性</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">2</span>; ++i)&#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</div><div class="line">                <span class="keyword">continue</span>; <span class="comment">//重复数字跳出循环</span></div><div class="line">            <span class="keyword">int</span> target = <span class="number">0</span> - nums[i];</div><div class="line">            <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash(length);<span class="comment">// first value, second index</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); ++j)&#123;</div><div class="line">                <span class="keyword">if</span> (hash.find(target - nums[j]) != hash.end()) &#123;</div><div class="line">                    result.push_back(&#123;nums[i], target - nums[j], nums[j]&#125;);</div><div class="line">                    <span class="comment">//result.push_front(nums[j]);//题目要求index小的在前面</span></div><div class="line">                    <span class="comment">//result.push_front(target - nums[j]);//index比j的index小</span></div><div class="line">                    <span class="comment">//return result;</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    hash[nums[j]] = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">  </div><div class="line">        &#125;</div><div class="line">        result.erase(unique(result.begin(), result.end()), result.end());</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//error:[0,0,0,0] Output:[[0,0,0],[0,0,0]] 解决：加入erase删除重复</span></div></pre></td></tr></table></figure>
<p>或：先排序，然后左右夹逼，复杂度 $O(n^2)$。<br>这个方法可以推广到 k-sum，先排序，然后敬 k − 2 次悟环，在偎内层悟环左右夹逼，肘间复杂 度是 $O(max{n log n, n^{k−1}})$。</p>
<h3 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 刷题 </category>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode/LintCode刷题之排序]]></title>
      <url>/2017/03/17/LeetCodeLintCode%E5%88%B7%E9%A2%98%E4%B9%8B%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="Merge-Sorted-Array"><a href="#Merge-Sorted-Array" class="headerlink" title="Merge Sorted Array"></a>Merge Sorted Array</h2><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><ul>
<li>leetcode: <a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="external">Merge Sorted Array | LeetCode OJ</a></li>
<li>lintcode: <a href="http://www.lintcode.com/en/problem/merge-sorted-array/" target="_blank" rel="external">(6) Merge Sorted Array</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Given two sorted integer arrays A and B, merge B into A as one sorted array.</div><div class="line"></div><div class="line">Example</div><div class="line">A = [1, 2, 3, empty, empty], B = [4, 5]</div><div class="line"></div><div class="line">After merge, A will be filled as [1, 2, 3, 4, 5]</div><div class="line"></div><div class="line">Note</div><div class="line">You may assume that A has enough space (size that is greater or equal to m + n)</div><div class="line">to hold additional elements from B.</div><div class="line">The number of elements initialized in A and B are m and n respectively.</div></pre></td></tr></table></figure>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>因为本题有 in-place 的限制，故必须从数组末尾的两个元素开始比较；否则就会产生挪动，一旦挪动就会是 $O(n^2)$ 的。<br>自尾部向首部逐个比较两个数组内的元素，取较大的置于数组 A 中。由于 A 的容量较 B 大，故最后 <code>m == 0</code> 或者 <code>n == 0</code> 时仅需处理 B 中的元素，因为 A 中的元素已经在 A 中，无需处理。</p>
<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = m + n - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (m &gt; <span class="number">0</span> &amp;&amp; n &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (A[m - <span class="number">1</span>] &gt; B[n - <span class="number">1</span>]) &#123;</div><div class="line">                A[index] = A[m - <span class="number">1</span>];</div><div class="line">                --m;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">            A[index] = B[n - <span class="number">1</span>];</div><div class="line">            --n;</div><div class="line">            &#125;</div><div class="line">        --index;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果B非空，因为A中的元素已经在A中，m==0时，A中元素位置已调整好，B中元素不定</span></div><div class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</div><div class="line">            A[index] = B[n - <span class="number">1</span>];</div><div class="line">            --n;</div><div class="line">            --index;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>最坏情况下需要遍历两个数组中所有元素，时间复杂度为 $O(m+n)$. 空间复杂度 $O(1)$.</p>
<h2 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a>Merge Two Sorted Lists</h2><h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h2><ul>
<li>leetcode: <a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">Merge Two Sorted Lists | LeetCode OJ</a></li>
<li>lintcode: <a href="http://www.lintcode.com/en/problem/merge-two-sorted-lists/" target="_blank" rel="external">(165) Merge Two Sorted Lists</a></li>
</ul>
<h3 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h3><p>Merge two sorted (ascending) linked lists and return it as a new sorted list.<br>The new sorted list should be made by splicing together the nodes of the two<br>lists and sorted in ascending order.</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>Given <code>1-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null</code>, <code>2-&gt;null</code> , return <code>1-&gt;2-&gt;3-&gt;8-&gt;11-&gt;15-&gt;null</code>.</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>此题为两个链表的合并，合并后的表头节点不一定，故应联想到使用<code>dummy</code>节点。链表节点的插入主要涉及节点<code>next</code>指针值的改变，两个链表的合并操作则涉及到两个节点的<code>next</code>值变化，若每次合并一个节点都要改变两个节点<code>next</code>的值且要对<code>NULL</code>指针做异常处理，势必会异常麻烦。嗯，第一次做这个题时我就是这么想的… 下面看看相对较好的思路。</p>
<p>首先<code>dummy</code>节点还是必须要用到，除了<code>dummy</code>节点外还引入一个<code>curr</code>节点充当下一次合并时的头节点。在<code>l1</code>或者<code>l2</code>的某一个节点为空指针<code>NULL</code>时，退出<code>while</code>循环，并将非空链表的头部链接到<code>curr-&gt;next</code>中。</p>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3>]]></content>
      
        <categories>
            
            <category> 刷题 </category>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[leetcode每日一题:(6)ZigZag Conversion]]></title>
      <url>/2017/03/17/leetcode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98(6)ZigZag%20Conversion/</url>
      <content type="html"><![CDATA[<h2 id="ZigZag-Conversion"><a href="#ZigZag-Conversion" class="headerlink" title="ZigZag Conversion"></a>ZigZag Conversion</h2><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><ul>
<li>leetcode: <a href="https://leetcode.com/problems/zigzag-conversion/" target="_blank" rel="external">ZigZag Conversion| LeetCode OJ</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">The string &quot;PAYPALISHIRING&quot; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</div><div class="line"></div><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div><div class="line">And then read line by line: &quot;PAHNAPLSIIGYIR&quot;</div><div class="line">Write the code that will take a string and make this conversion given a number of rows:</div><div class="line"></div><div class="line">string convert(string text, int nRows);</div><div class="line">convert(&quot;PAYPALISHIRING&quot;, 3) should return &quot;PAHNAPLSIIGYIR&quot;.</div></pre></td></tr></table></figure>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>可以发现首行和末行的重复周期都是 $2 <em> nRows - 2$，对于首行和末行之间的行，还会额外重复一次，重复的这一次距离本周期起始字符的距离是 $2 </em> nRows - 2 - 2 * i$ 。</p>
<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> nRows)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (nRows &lt;= <span class="number">1</span> || s.length() == <span class="number">0</span>)  <span class="comment">//nRows=1 按下面会死循环</span></div><div class="line">           <span class="keyword">return</span> s;  </div><div class="line">        <span class="built_in">string</span> ret = <span class="string">""</span>;</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> len = s.size();</div><div class="line">        <span class="keyword">int</span> lag = <span class="number">2</span>*nRows - <span class="number">2</span>; <span class="comment">//循环周期  </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRows; i++) &#123;  </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; len; j += lag) &#123;  </div><div class="line">                ret += s[j];    </div><div class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; nRows<span class="number">-1</span>) &#123;  <span class="comment">//非首行和末行时</span></div><div class="line">                    <span class="keyword">int</span> t = j + lag - <span class="number">2</span>*i;  </div><div class="line">                    <span class="keyword">if</span> (t &lt; len) &#123;  </div><div class="line">                        ret += s[t];  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">   </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>###提交成功<br><img src="http://upload-images.jianshu.io/upload_images/5831288-6ea88f77507d4e9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提交成功"></p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法]]></title>
      <url>/2016/11/17/Markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote>
<h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown是<em>什么</em>？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="都谁在用？"><a href="#都谁在用？" class="headerlink" title="都谁在用？"></a>都<em>谁</em>在用？</h4><h4 id="感觉有意思？不怕你看见，就怕你试试"><a href="#感觉有意思？不怕你看见，就怕你试试" class="headerlink" title="感觉有意思？不怕你看见，就怕你试试"></a>感觉有意思？<em>不怕你看见，就怕你试试</em></h4><a id="more"></a>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown是<em>什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语言编写的语言转换成HTML内容的工具，最初是一个perl脚本<em>Markdown.pl</em>。    </p>
<h3 id="2-为什么要使用它？"><a href="#2-为什么要使用它？" class="headerlink" title="2. 为什么要使用它？"></a>2. <em>为什么</em>要使用它？</h3><ul>
<li>它是易读（<em>看起开舒服</em>）、易写（<em>语法简单</em>）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>
<li>兼容HTML，可以转换为HTML格式发布。</li>
<li>跨平台使用。</li>
<li>越来越多的网站支持Markdown。</li>
<li>更方便清晰的组织你的电子邮件。（Markdown-here, Airmail）</li>
<li>摆脱Word（我不是认真的）。</li>
</ul>
<h3 id="3-怎么使用？"><a href="#3-怎么使用？" class="headerlink" title="3. 怎么使用？"></a>3. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>
<p>废话太多，下面正文，Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p>
<h4 id="3-1-标题"><a href="#3-1-标题" class="headerlink" title="3.1 标题"></a>3.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p>
<blockquote>
<p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote>
<p>2）使用<code>#</code>，可表示1-6级标题。</p>
<blockquote>
<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p>
</blockquote>
<p>效果：</p>
<blockquote>
<h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<h4 id="3-2-段落"><a href="#3-2-段落" class="headerlink" title="3.2 段落"></a>3.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>
<h4 id="3-3-区块引用"><a href="#3-3-区块引用" class="headerlink" title="3.3 区块引用"></a>3.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p>
<blockquote>
<p>> 区块引用<br>>&gt; 嵌套引用  </p>
</blockquote>
<p>效果：</p>
<blockquote>
<p>区块引用  </p>
<blockquote>
<p>嵌套引用 </p>
</blockquote>
</blockquote>
<h4 id="3-4-代码区块"><a href="#3-4-代码区块" class="headerlink" title="3.4 代码区块"></a>3.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p>
<p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p>
<p>代码区块：</p>
<pre><code>void main()
{
    printf(&quot;Hello, Markdown.&quot;);
}
</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p>
<h4 id="3-5-强调"><a href="#3-5-强调" class="headerlink" title="3.5 强调"></a>3.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p>
<blockquote>
<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p>
</blockquote>
<h4 id="3-6-列表"><a href="#3-6-列表" class="headerlink" title="3.6 列表"></a>3.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p>
<blockquote>
<p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p>
</blockquote>
<p><strong>注意</strong>：标记后面最少有一个<em>空格</em>或<em>制表符</em>。若不在引用区块中，必须和前方段落之间存在空行。</p>
<p>效果：</p>
<blockquote>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p>
<blockquote>
<p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p>
</blockquote>
<p>效果：</p>
<blockquote>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
</blockquote>
<h4 id="3-7-分割线"><a href="#3-7-分割线" class="headerlink" title="3.7 分割线"></a>3.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p>
<h4 id="3-8-链接"><a href="#3-8-链接" class="headerlink" title="3.8 链接"></a>3.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="external">younghz的Markdown库</a>。</p>
</blockquote>
<p><strong>参考式</strong>：</p>
<blockquote>
<p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="external">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="external">younghz的Markdown库2</a></p>
</blockquote>
<p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>
<h4 id="3-9-图片"><a href="#3-9-图片" class="headerlink" title="3.9 图片"></a>3.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p>
<h4 id="3-10-反斜杠"><a href="#3-10-反斜杠" class="headerlink" title="3.10 反斜杠\"></a>3.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>
<h4 id="3-11-符号’-’"><a href="#3-11-符号’-’" class="headerlink" title="3.11 符号’`’"></a>3.11 符号’`’</h4><p>起到标记作用。如：</p>
<blockquote>
<p>`ctrl+a`</p>
</blockquote>
<p>效果：</p>
<blockquote>
<p><code>ctrl+a</code>    </p>
</blockquote>
<h4 id="4-都谁在用？"><a href="#4-都谁在用？" class="headerlink" title="4. 都谁在用？"></a>4. 都<em>谁</em>在用？</h4><p>Markdown的使用者：</p>
<ul>
<li>GitHub</li>
<li>简书</li>
<li>Stack Overflow</li>
<li>Apollo</li>
<li>Moodle</li>
<li>Reddit</li>
<li>等等</li>
</ul>
<h4 id="5-感觉有意思？趁热打铁，推荐几个工具。"><a href="#5-感觉有意思？趁热打铁，推荐几个工具。" class="headerlink" title="5. 感觉有意思？趁热打铁，推荐几个工具。"></a>5. 感觉有意思？趁热打铁，推荐几个<em>工具</em>。</h4><ul>
<li><strong>Chrome</strong>下的stackedit插件可以离线使用，很爽。也不用担心平台受限。<br>在线的dillinger.io算是评价好的了，可是不能离线使用。    </li>
<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li>
<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。推荐。    </li>
<li><strong>Linux</strong>下的ReText不错。    </li>
</ul>
<p><strong>其实在对语法了如于心的话，直接用编辑器就可以了，脑子里满满的都是格式化好的文本啊。</strong><br>我现在使用<code>马克飞象</code> + <code>Markdown-here</code>，先编辑好，然后一键格式化，挺方便。</p>
<hr>
<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。" target="_blank" rel="external">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。</a></p>
<hr>
<p>以上基本是所有traditonal markdown的语法。</p>
<h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p>
<p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p>
<table>
<thead>
<tr>
<th style="text-align:center">代码库</th>
<th>链接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">MarkDown</td>
<td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="external">https://github.com/younghz/Markdown</a></td>
</tr>
<tr>
<td style="text-align:center">moos-young</td>
<td><a href="https://github.com/younghz/moos-young" title="tianchi" target="_blank" rel="external">https://github.com/younghz/moos-young</a></td>
</tr>
</tbody>
</table>
<p>关于其它扩展语法可参见具体工具的使用说明。</p>
<p>Modified based on :<a href="http://younghz.github.io/Markdown/" target="_blank" rel="external">younghz’s Github</a></p>
]]></content>
      
        <categories>
            
            <category> 其它 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo插件记录(长期更新)]]></title>
      <url>/2016/11/12/Hexo%E6%8F%92%E4%BB%B6%E8%AE%B0%E5%BD%95(%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0)/</url>
      <content type="html"><![CDATA[<h1 id="1-使用本地图片"><a href="#1-使用本地图片" class="headerlink" title="1.使用本地图片"></a>1.使用<strong>本地图片</strong></h1><p> hexo 中使用本地图片是件非常让人纠结的事情，在 markdown 里的图片地址似乎永远无法和最后生成的网页保持一致。解决方案：<br><a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">hexo-asset-image</a></p>
<h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><p>首先确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。<br>在 hexo 目录，执行<br><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code><br>假设在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MacGesture2-Publish</div><div class="line">├── apppicker.jpg</div><div class="line">├── logo.jpg</div><div class="line">└── rules.jpg</div><div class="line">MacGesture2-Publish.md</div></pre></td></tr></table></figure></p>
<p>这样的目录结构（目录名和文章名一致），只要使用<code>![logo](MacGesture2-Publish/logo.jpg)</code> 就可以插入图片。<br><a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo写作技巧(长期更新)]]></title>
      <url>/2016/11/12/Hexo%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7(%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0)/</url>
      <content type="html"><![CDATA[<h3 id="1-添加阅读全文来控制显示的内容"><a href="#1-添加阅读全文来控制显示的内容" class="headerlink" title="1.添加阅读全文来控制显示的内容"></a>1.添加<strong>阅读全文</strong>来控制显示的内容</h3><p>在简介后面提供一个链接<strong>阅读全文</strong>来进入文章的详情页。<br><img src="/2016/11/12/Hexo写作技巧(长期更新)/阅读全文.png" alt=""></p>
<p>这种方法可以根据文章的内容，自己在合适的位置添加<code>&lt;!--more--&gt;</code>标签，使用灵活，也是Hexo推荐的方法。</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo和GitHub Pages搭建免费独立博客及域名配置]]></title>
      <url>/2016/11/11/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitHub-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>摘要：这是一篇使用GitHub Pages和Hexo搭建免费独立博客的总结。</p>
<p>我在这里写下长篇大论，只希望小白们能更快速入门。一天搭建出属于自己的个人独立博客，我将会通过 安装流程主线+优质文章 作为参考。从我个人接触到成功搭建博客，走了很多弯路，网上的资料更是琳琅满目无从下手，希望通过本教程给想搭建个人博客的人一个敢于尝试的机会。我会将这篇教程写仔细，会将我出现过的问题给予解决方法。大家有问题可以留言，我会尽量帮助大家解决。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么选择GitHub Pages？</p>
<blockquote>
<ul>
<li>无需购置服务器，目前的blog挂载在Github Pages，免服务器费的同时还能做负载均衡;</li>
<li>github pages有300M免费空间，资料自己管理，保存可靠；</li>
<li>学着用github，享受github的便利，上面有很多大牛，眼界会开阔很多；</li>
<li>顺便看看github工作原理，最好的团队协作流程；</li>
<li>github是趋势；</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>相信自己，敢于面对，过程并不是很难。</p>
<h2 id="Nodejs环境包"><a href="#Nodejs环境包" class="headerlink" title="Nodejs环境包"></a>Nodejs环境包</h2><p>因为 Hexo 是基于 Node.js 的第三方模块，所以缺少 Node.js 不可。访问 <a href="http://nodejs.org/" target="_blank" rel="external">Node.js官网</a>下载适合自己系统的 Node.js 安装包。目前最新的版本为 ｖ6.5.0。</p>
<p>（注：至于安装过程和环境变量配置请参考<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">菜鸟教程-Node.js安装配置</a>）</p>
<h2 id="Git工具包"><a href="#Git工具包" class="headerlink" title="Git工具包"></a>Git工具包</h2><p>如果之后你需要安装一些 Hexo 的主题和插件，<a href="https://git-scm.com/downloads/" target="_blank" rel="external">Git</a> 是最好的下载方式。因为好多主题都被放在了 Github 上，你只需要敲几个字符就可以下载。</p>
<p>（注：宁浩网之前介绍过Git的使用方法，安装过程及简单使用请见<a href="http://ninghao.net/blog/1379" target="_blank" rel="external">这里</a>）</p>
<h3 id="Git与GitHub区别"><a href="#Git与GitHub区别" class="headerlink" title="Git与GitHub区别"></a>Git与GitHub区别</h3><p>这里，我们要区分清楚git与github。<br>git是一个版本控制的工具，而github有点类似于远程仓库，用于存放用git管理的各种项目。</p>
<h3 id="与GitHub建立联系"><a href="#与GitHub建立联系" class="headerlink" title="与GitHub建立联系"></a>与GitHub建立联系</h3><p>git安装好以后执行以下步骤：</p>
<blockquote>
<ol>
<li>从程序目录打开 “Git Bash” ,或者直接用git shell，github自带的工具</li>
<li>键入命令：ssh-keygen -t rsa -C “email@email.com”<br>“email@email.com”是github注册账号邮箱地址</li>
<li>提醒你输入key的名称，你可以不用输入，直接3个回车，就OK了；</li>
<li>在C:\Documents and Settings\Administrator\下产生两个文件：id_rsa和id_rsa.pub</li>
<li>用记事本打开id_rsa.pub文件，复制内容，在github的网站上找到ssh密钥管理页面，添加新公钥 。</li>
<li>在git bash中输入ssh -T git@github.com命令，出现Hi username! You’ve successfully authenticated表示成功。</li>
</ol>
</blockquote>
<h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。</p>
<p>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;***&quot;//用户名</div><div class="line">$ git config --global user.email &quot;****@****.com&quot;//填写自己的邮箱</div></pre></td></tr></table></figure></p>
<h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><p>因为最终博客是要部署到github上的，这里我首先讲解github建立仓库，然后讲解hexo安装。为了方便大家一次部署成功并且考虑到以后如果大家换电脑或者重装系统后还能够修改以前的博客，请按照我的解决方案进行，这里大家不懂也没事，照着来就行，我会在文章末尾优化部署与管理中详解。</p>
<h2 id="创建GitHub-Pages-仓库"><a href="#创建GitHub-Pages-仓库" class="headerlink" title="创建GitHub Pages 仓库"></a>创建GitHub Pages 仓库</h2><p>在自己的GitHub账号下创建一个新的仓库，命名为username.github.io<br>（username是你的账号名)。在这里，要知道，GitHub Pages有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是User Pages。<br>简单来说，User Pages 与 Project Pages的区别是：</p>
<blockquote>
<ul>
<li>User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。</li>
<li>用于存放 User Pages 的仓库必须使用username.github.io的命名规则，而 Project Pages 则没有特殊的要求。</li>
<li>User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。</li>
<li>User Pages 通过 http(s)://username.github.io 进行访问，而 Projects * Pages通过 http(s)://username.github.io/projectname 进行访问。</li>
</ul>
</blockquote>
<p><strong> 这一步很关键 </strong><br>创建两个分支：master 与 hexo。<strong> 设置hexo为默认分支 </strong>（因为我们只需要手动管理这个分支上的Hexo网站文件）</p>
<p>到这为止，我们的github仓库已经建立好了，我们马上就能见到成果了，下面我们开始建站。</p>
<h2 id="hexo介绍"><a href="#hexo介绍" class="headerlink" title="hexo介绍"></a>hexo介绍</h2><p>Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。</p>
<p>而架设Hexo的环境更简单了 不需要 lnmp/lamp/XAMPP 这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务</p>
<p>比如本人的这个博客 就是托管于 GitHub Pages服务上</p>
<h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p>安装Hexo相当简单。在安装之前，必须检查电脑中是否已经安装下列应用程序：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。打开git bash执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>这样hexo就已经安装好了。</p>
<h2 id="使用hexo建站"><a href="#使用hexo建站" class="headerlink" title="使用hexo建站"></a>使用hexo建站</h2><p>安装完后，在你喜欢的文件夹内（我的是根目录）（例如H：\），点击鼠标右键选择Git bash，输入以下指令（填自己的地址）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:username/username.github.io.git</div></pre></td></tr></table></figure></p>
<p>该命令会把你的博客仓库同步下来，然后cd到你的仓库文件夹下面依次执行以下命令：</p>
<blockquote>
<p>1、$ hexo init</p>
</blockquote>
<p>该命令会在目标文件夹内建立网站所需要的所有文件。接下来是安装依赖包：</p>
<blockquote>
<p>2、$ npm install</p>
</blockquote>
<p>这样，我们就已经搭建起本地的Hexo博客了。可以先执行以下命令（在对应文件夹下），然后再浏览器输入localhost:4000查看。</p>
<blockquote>
<p>3、$ hexo generate<br>4、$ hexo server</p>
</blockquote>
<p>这个博客只是本地的，别人是浏览不了的，之后需要部署到GitHub上。</p>
<h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 官方文档</a></li>
</ul>
<h2 id="部署博客到GitHub上"><a href="#部署博客到GitHub上" class="headerlink" title="部署博客到GitHub上"></a>部署博客到GitHub上</h2><p>部署其实很简单，只要改一下配置文件，执行几条命令就行了，为了以后的方便，现在麻烦了一点，大家跟着做就行了，具体原因也在配置管理与优化里有讲到。</p>
<h3 id="配置站点文件"><a href="#配置站点文件" class="headerlink" title="配置站点文件"></a>配置站点文件</h3><p>我们继续使用上面的文件夹H:\username.github.io（也可以新建一个文件夹重新生成），然后编辑该文件夹下的_config.yml（这是站点配置文件）<br>默认生成的_config.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Deployment </div><div class="line">## Docs: http://hexo.io/docs/deployment.html </div><div class="line">deploy:   </div><div class="line">  type:</div></pre></td></tr></table></figure></p>
<p>修改后的_config.yml：（也是填入自己的ssh地址）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>这里解释一下前面为什么建立两个分支master和hexo，为了管理方便，以后master分支用来发布网站（一会再说怎么发布），hexo分支用来存放Hexo网站文件。</p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>为了能够使Hexo部署到GitHub上，需要安装一个插件：（在项目目录下执行命令）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>然后，执行下列指令即可完成部署：（以后发布也按照这三条命令执行）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean #清空public文件夹下生成的静态文件和db.json文件</div><div class="line">$ hexo generate #重新生成静态文件和db.json</div><div class="line">$ hexo deploy #按照站点配置文件部署到github上</div></pre></td></tr></table></figure></p>
<p>之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~</p>
<h3 id="提交Hexo网站文件到hexo分支"><a href="#提交Hexo网站文件到hexo分支" class="headerlink" title="提交Hexo网站文件到hexo分支"></a>提交Hexo网站文件到hexo分支</h3><p>由于上面执行了hexo init命令，所以要重新关联远端库<br>首先在项目文件夹下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git init #初始化为一个git目录</div><div class="line">$ git remote add origin git@github.com:username/username.github.io.git #使用你自己的地址关联</div><div class="line">$ git pull #pull一下你的远端库</div></pre></td></tr></table></figure></p>
<p>此时你应该在hexo分支下，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ H:\username.github.io (hexo) (hexo-site@0.0.0)</div></pre></td></tr></table></figure></p>
<p>如果不是，执行以下命令切换到hexo分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout hexo</div></pre></td></tr></table></figure></p>
<p>然后执行以下命令提交网站相关文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add . #添加所有文件到暂存区</div><div class="line">$ git commit -m &quot;提交信息&quot;     #提交到本地仓库</div><div class="line">$ git push origin hexo  #把本地库push到远端库的hexo分支</div></pre></td></tr></table></figure></p>
<p>提交后去github上查看是否成功，这是我的<a href="https://github.com/username/username.github.io" target="_blank" rel="external">github地址</a>，看看是否一样。</p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>我使用的是<a href="">next主题</a>，大家喜欢也可以去我的<a href="https://github.com/username/username.github.io" target="_blank" rel="external">github</a>上fork一下，然后在这基础上修改，大家也可以找自己喜欢的主题来换。<br>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到H:\username.github.io\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。<br>下面以切换next主题为例来讲一下具体如何操作，同样也是在项目文件夹下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next.git themes/next</div></pre></td></tr></table></figure></p>
<p>然后在站点配置文件_config.yml中的theme: landscape改为theme: next，重新发布一下就完成了。</p>
<h3 id="相关资料-1"><a href="#相关资料-1" class="headerlink" title="相关资料"></a>相关资料</h3><ul>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next主题使用文档</a></li>
</ul>
<h1 id="优化部署与管理"><a href="#优化部署与管理" class="headerlink" title="优化部署与管理"></a>优化部署与管理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html）。<br>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦。）这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。<br>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库）。<br>所以，我利用了分支！！！<br>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。<br>下面以我的博客作为例子详细地讲述。</p>
<h3 id="我的博客搭建流程"><a href="#我的博客搭建流程" class="headerlink" title="我的博客搭建流程"></a>我的博客搭建流程</h3><blockquote>
<p>1、创建仓库，username.github.io；<br>2、创建两个分支：master 与 hexo；<br>3、设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；<br>4、使用git clone git@github.com:username/username.github.io.git拷贝仓库；<br>5、在本地username.github.io文件夹下通过Git bash依次执行npm install hexo-cli、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;<br>6、修改_config.yml中的deploy参数，分支应为master；<br>7、使用git init 、<br>git remote add origin git@github.com:username/username.github.io.git以及git pull命令重新关联远端库。<br>8、使用git checkout hexo命令切换到hexo分支然后依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；<br>9、执行hexo g、 hexo d生成网站并部署到GitHub上。</p>
</blockquote>
<h3 id="shell脚本自动化"><a href="#shell脚本自动化" class="headerlink" title="shell脚本自动化"></a>shell脚本自动化</h3><p>开启 Hexo 的本地服务或者提交到github pages这些都是一些终端里的 Hexo 命令，所以笔者写了一些 shell 脚本，来简化这些操作。所以基本就是用 hey 可视化写文章，写好了之后，然后点击 一键部署 的 shell 脚本，然后就自动发布了（当然这也纯属鸡助，看个人。）。由于 shell 脚本比较简单，在此插入一个一键部署的shell脚本代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">cd /your/path </div><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line">hexo d</div><div class="line">git add .</div><div class="line">git commit -m &quot;modified&quot;</div><div class="line">git push origin hexo</div></pre></td></tr></table></figure></p>
<p>这样一来，在GitHub上的username.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美！</p>
<h2 id="我的博客管理流程"><a href="#我的博客管理流程" class="headerlink" title="我的博客管理流程"></a>我的博客管理流程</h2><h3 id="日常修改"><a href="#日常修改" class="headerlink" title="日常修改"></a>日常修改</h3><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：<br>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；<br>然后才执行hexo generate -d发布网站到master分支上。<br>。</p>
<h3 id="本地资料丢失"><a href="#本地资料丢失" class="headerlink" title="本地资料丢失"></a>本地资料丢失</h3><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>
<blockquote>
<p>1、使用git clone git@github.com:username/username.github.io.git拷贝仓库（默认分支为hexo）；<br>2、在本地新拷贝的username.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo-cli、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</p>
</blockquote>
<h1 id="购买域名及配置"><a href="#购买域名及配置" class="headerlink" title="购买域名及配置"></a>购买域名及配置</h1><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>因为Hexo个人博客是托管在github之上，每次访问都要使用githubname.github.io这么一个长串的域名来访问，会显得非常繁琐。这个时候我们可以购买一个域名，设置DNS跳转，以达到通过域名即可访问我们的个人博客。通过查阅文档发现，github pages是支持域名绑定的。</p>
<h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>国内国外有很多的域名供应商，选择一个好的机构购买域名，会为自己的站点配置节约很多时间，也不会因为域名的出错，导致影响百度对我们个人博客的收录。近几年来，国内做的比较好的域名供应商有阿里的万网。我就是在阿里的<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">万网</a>购买的域名。通过查找，找到自己喜欢的域名，后来为了解决成本，我选了.top结尾的域名，一年只需要4块钱，很便宜。</p>
<h2 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h2><p><del>### DNS地址解析<br>修改域名的 DNS 地址为 f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net</del> </p>
<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p><del>登录进入万网的域名控制台，点击”域名和网站”中的”云DNS”，点击对应域名的”解析”。<br>点击添加解析，记录类型选A或CNAME，A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，解析记录设置两个www和@，线路就默认就行了（或ping自己的xx.github.io），CNAME记录值填你的github博客网址。如我的是sidney001.github.io。<br>这些全部设置完成后，此时你并不能要申请的域名访问你的博客。接着你需要做的是在hexo根目录的source文件夹里创建CNAME文件，不带任何后缀，里面添加你的域名信息，如：sidney001.top。实践证明用www.sidney001.top和sidney001.top访问都是可以的。重新清理hexo,并发布即可用新的域名访问。</del></p>
<p>在阿里云管理控制台中,选择中刚刚购买的域名,点击解析按钮<br>这时会提醒你选择解析到阿里云主机,或者其他主机,这时需要将你在GitHub上创建的GitHub Pages的域名 xxx.github.io进行查询,得到一个IP地址。</p>
<p>从ping指令得到一个IP地址 151.101.100.133, 将这个IP地址记录下来<br>进入万网【域名控制台】》【域名解析】标签,选择【解析设置】,<br>点击【添加设置】,添加一个记录类型为A,主机记录为www,解析线路默认,记录值为151.101.100.133的记录<br>点击【添加设置】,再添加一个记录类型为A,主机记录为@,解析线路默认,记录值为151.101.100.133的记录。</p>
<h3 id="Github-解析"><a href="#Github-解析" class="headerlink" title="Github 解析"></a>Github 解析</h3><p>在GitHub的xxx.github.io项目,进入【Settings】标签页,在【Custom domain】功能中,将刚刚申请的域名写进去。</p>
<p>GitHub设置完成,等几分钟,在浏览器输入刚刚购买的域名,就可以看到刚刚GitHub上的网站了!</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>在网上看了很多资料，总结了很多资料，好累(-.-)</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/11/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
